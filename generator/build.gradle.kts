import org.spongepowered.gradle.vanilla.repository.MinecraftPlatform
import java.nio.file.Files
import java.nio.file.Path
import kotlin.io.path.deleteIfExists
import kotlin.io.path.exists
import kotlin.io.path.isDirectory

plugins {
    application
    alias(libs.plugins.vanillaGradle)
}

val autogeneratedProject = project(":jet-data-autogenerated")

dependencies {
    implementation(project(":jet-data-model"))
    implementation(project(":jet-data-codecs"))
    implementation(libs.checkerFrameworkQual)
    implementation(libs.bundles.adventure)
    implementation(libs.javaPoet)
}

application {
    mainClass.set("net.hypejet.jet.data.generator.GeneratorEntrypoint")
}

minecraft {
    version(libs.versions.minecraftVersion.get())
    platform(MinecraftPlatform.SERVER)
}

tasks.named<JavaExec>("run") {
    val resourceSources = autogeneratedProject.sourceSets.main.get().resources.sourceDirectories.toList()
    if (resourceSources.size != 1)
        error("Expected from resource sources of an autogenerated project to have exactly one source directory")

    val javaSources = autogeneratedProject.sourceSets.main.get().java.sourceDirectories.toList()
    if (javaSources.size != 1)
        error("Expected from java sources of an autogenerated project to have exactly one source directory")

    val resourcePath = resourceSources.first().toPath().toAbsolutePath()
    if (resourcePath.exists()) {
        // Remove the old generated files
        Files.list(resourcePath).forEach(::removeRecursively)
    }

    val javaPath = javaSources.first().toPath().toAbsolutePath()
    if (javaPath.exists() && javaPath.isDirectory()) {
        // Remove the old generated files
        Files.list(javaPath).forEach(::removeRecursively)
    }

    args(resourcePath.toString(), javaPath.toString())
}

/**
 * Removes the path and its contents recursively.
 *
 * @since 1.0
 * @author Codestech
 */
private fun removeRecursively(path: Path) {
    if (!path.exists()) return

    if (path.isDirectory()) {
        Files.list(path).forEach(::removeRecursively)
    }

    path.deleteIfExists()
}