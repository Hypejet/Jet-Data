package net.hypejet.jet.data.generator.generators.biome;

import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.FieldSpec;
import net.hypejet.jet.data.biome.temperature.TemperatureModifier;
import net.hypejet.jet.data.generator.ConstantGenerator;
import net.hypejet.jet.data.generator.util.CodeBlocks;
import net.hypejet.jet.data.generator.util.JavaDocBuilder;
import net.minecraft.world.level.biome.Biome;
import org.checkerframework.checker.nullness.qual.NonNull;
import org.slf4j.Logger;

import javax.lang.model.element.Modifier;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

/**
 * Represents a {@linkplain ConstantGenerator constant generator}, which generates
 * {@linkplain TemperatureModifier temperature modifiers} using data defined in the
 * {@linkplain Biome.TemperatureModifier Minecraft biome temperature modifier enum}.
 *
 * @since 1.0
 * @author Codestech
 * @see TemperatureModifier
 * @see net.minecraft.world.level.biome.Biome.TemperatureModifier
 * @see ConstantGenerator
 */
public final class BuiltInTemperatureModifierGenerator extends ConstantGenerator {

    private static final String PACKAGE = "net.hypejet.jet.data.biome.temperature";

    static final ClassName CLASS_NAME = ClassName.get(PACKAGE, "BuiltInTemperatureModifiers");

    /**
     * Constructs the {@linkplain BuiltInTemperatureModifierGenerator built-in temperature modifier generator}.
     *
     * @since 1.0
     */
    public BuiltInTemperatureModifierGenerator() {
        super(PACKAGE, CLASS_NAME, TemperatureModifier.class,
                JavaDocBuilder.builder()
                        .line("Represents a holder of built-in Minecraft temperature modifiers.")
                        .paragraph("Code autogenerated, do not edit!")
                        .emptyLine()
                        .since("1.0")
                        .see(TemperatureModifier.class)
                        .build(),
                JavaDocBuilder.builder()
                        .line("Gets all built-in temperature modifiers.")
                        .emptyLine()
                        .returns("the temperature modifiers")
                        .since("1.0")
                        .see(TemperatureModifier.class)
                        .build());
    }

    @Override
    public @NonNull Collection<FieldSpec> generateFields(@NonNull Logger logger) {
        List<FieldSpec> fieldSpecs = new ArrayList<>();
        ClassName implClassName = ClassName.get(PACKAGE, "TemperatureModifierImpl");

        for (Biome.TemperatureModifier value : Biome.TemperatureModifier.values()) {
            fieldSpecs.add(FieldSpec.builder(TemperatureModifier.class, constantName(value))
                    .addModifiers(Modifier.PUBLIC, Modifier.STATIC, Modifier.FINAL)
                    .initializer(CodeBlocks.constructor(implClassName, CodeBlocks.string(value.getName())))
                    .build());
        }

        return List.copyOf(fieldSpecs);
    }

    /**
     * Creates a constant name for a {@linkplain Biome.TemperatureModifier Minecraft biome temperature modifier}.
     *
     * @param temperatureModifier the temperature modifier
     * @return the constant name
     * @since 1.0
     */
    static @NonNull String constantName(Biome.@NonNull TemperatureModifier temperatureModifier) {
        return temperatureModifier.name();
    }
}