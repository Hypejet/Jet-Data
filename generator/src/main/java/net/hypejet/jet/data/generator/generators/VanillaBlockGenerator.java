package net.hypejet.jet.data.generator.generators;

import com.squareup.javapoet.AnnotationSpec;
import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.CodeBlock;
import com.squareup.javapoet.FieldSpec;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.ParameterizedTypeName;
import com.squareup.javapoet.TypeSpec;
import net.hypejet.jet.data.generator.Generator;
import net.hypejet.jet.data.generator.util.CodeBlocks;
import net.hypejet.jet.data.generator.util.JavaDocBuilder;
import net.hypejet.jet.data.generator.util.JavaFileUtil;
import net.minecraft.core.DefaultedRegistry;
import net.minecraft.core.registries.BuiltInRegistries;
import net.minecraft.resources.ResourceKey;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.world.level.block.Block;
import org.checkerframework.checker.nullness.qual.NonNull;
import org.slf4j.Logger;

import javax.lang.model.element.Modifier;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;

/**
 * Represents a {@linkplain Generator generator}, which generates {@linkplain net.hypejet.jet.data.block.Block blocks}
 * using data defined in a {@linkplain BuiltInRegistries#BLOCK block registry}.
 *
 * @since 1.0
 * @author Codestech
 * @see net.hypejet.jet.data.block.Block
 * @see BuiltInRegistries#BLOCK
 * @see Generator
 */
public final class VanillaBlockGenerator implements Generator {

    private static final String PACKAGE = "net.hypejet.jet.data.block";
    private static final String CLASS_NAME = "VanillaBlocks";

    @Override
    public @NonNull JavaFile generate(@NonNull Logger logger) {
        Class<?> blockClass = net.hypejet.jet.data.block.Block.class;

        TypeSpec.Builder specBuilder = TypeSpec.classBuilder(ClassName.get(PACKAGE, CLASS_NAME))
                .addJavadoc(JavaDocBuilder.builder()
                        .line("Represents a holder of built-in Minecraft blocks.")
                        .paragraph("Code autogenerated, do not edit!")
                        .emptyLine()
                        .since("1.0")
                        .see(blockClass)
                        .build())
                .addMethod(MethodSpec.constructorBuilder()
                        .addModifiers(Modifier.PRIVATE)
                        .build())
                .addModifiers(Modifier.PUBLIC, Modifier.FINAL);


        DefaultedRegistry<Block> registry = BuiltInRegistries.BLOCK;
        ClassName blockImplClassName = ClassName.get("net.hypejet.jet.data.block", "BlockImpl");

        List<FieldSpec> blockFieldSpecs = new ArrayList<>();

        for (Block block : registry) {
            ResourceLocation location = registry.wrapAsHolder(block)
                    .unwrapKey()
                    .map(ResourceKey::location)
                    .orElseThrow(() -> new IllegalArgumentException("The block was not registered"));
            blockFieldSpecs.add(FieldSpec.builder(blockClass, location.getPath().toUpperCase())
                    .addModifiers(Modifier.PUBLIC, Modifier.STATIC, Modifier.FINAL)
                    .initializer(CodeBlocks.constructor(blockImplClassName, CodeBlocks.keyCreator(location),
                            registry.getId(block)))
                    .build());
        }

        List<CodeBlock> fieldReferencingCodeBlocks = new ArrayList<>();

        for (FieldSpec fieldSpec : blockFieldSpecs) {
            specBuilder.addField(fieldSpec);
            fieldReferencingCodeBlocks.add(CodeBlock.of(fieldSpec.name));
        }

        ParameterizedTypeName valueCollectionTypeName = ParameterizedTypeName.get(Collection.class, blockClass)
                .annotated(Collections.singletonList(AnnotationSpec.builder(NonNull.class).build()));

        FieldSpec valuesFieldSpec = FieldSpec.builder(valueCollectionTypeName, "VALUES")
                .addModifiers(Modifier.PRIVATE, Modifier.STATIC, Modifier.FINAL)
                .initializer(CodeBlocks.setCreator(fieldReferencingCodeBlocks.toArray()))
                .build();
        specBuilder.addField(valuesFieldSpec);

        specBuilder.addMethod(MethodSpec.methodBuilder("values")
                .returns(valueCollectionTypeName)
                .addStatement(CodeBlocks.returning(valuesFieldSpec.name))
                .addModifiers(Modifier.PUBLIC, Modifier.STATIC)
                .addJavadoc(JavaDocBuilder.builder()
                        .line("Gets all built-in blocks.")
                        .emptyLine()
                        .returns("the blocks")
                        .since("1.0")
                        .see(blockClass)
                        .build())
                .build());

        return JavaFile.builder(PACKAGE, specBuilder.build())
                .indent(JavaFileUtil.INDENT)
                .build();
    }
}