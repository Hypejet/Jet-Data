package net.hypejet.jet.data.generator.generators;

import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.FieldSpec;
import net.hypejet.jet.data.generator.ConstantGenerator;
import net.hypejet.jet.data.generator.util.CodeBlocks;
import net.hypejet.jet.data.generator.util.JavaDocBuilder;
import net.hypejet.jet.data.generator.util.ResourceLocationUtil;
import net.minecraft.core.DefaultedRegistry;
import net.minecraft.core.registries.BuiltInRegistries;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.world.level.block.Block;
import org.checkerframework.checker.nullness.qual.NonNull;
import org.slf4j.Logger;

import javax.lang.model.element.Modifier;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

/**
 * Represents a {@linkplain ConstantGenerator constant generator}, which
 * generates {@linkplain net.hypejet.jet.data.block.Block blocks} using data defined in
 * a {@linkplain BuiltInRegistries#BLOCK block registry}.
 *
 * @since 1.0
 * @author Codestech
 * @see net.hypejet.jet.data.block.Block
 * @see BuiltInRegistries#BLOCK
 * @see ConstantGenerator
 */
public final class VanillaBlockGenerator extends ConstantGenerator {

    private static final String PACKAGE = "net.hypejet.jet.data.block";
    private static final String CLASS_NAME = "VanillaBlocks";

    private static final Class<?> BLOCK_CLASS = net.hypejet.jet.data.block.Block.class;

    /**
     * Constructs the {@linkplain VanillaBlockGenerator vanilla block generator}.
     *
     * @since 1.0
     */
    public VanillaBlockGenerator() {
        super(PACKAGE, ClassName.get(PACKAGE, CLASS_NAME), BLOCK_CLASS,
                JavaDocBuilder.builder()
                        .line("Represents a holder of built-in Minecraft blocks.")
                        .paragraph("Code autogenerated, do not edit!")
                        .emptyLine()
                        .since("1.0")
                        .see(BLOCK_CLASS)
                        .build(),
                JavaDocBuilder.builder()
                        .line("Gets all built-in blocks.")
                        .emptyLine()
                        .returns("the blocks")
                        .since("1.0")
                        .see(BLOCK_CLASS)
                        .build());
    }

    @Override
    public @NonNull Collection<FieldSpec> generateFields(@NonNull Logger logger) {
        DefaultedRegistry<Block> registry = BuiltInRegistries.BLOCK;
        ClassName blockImplClassName = ClassName.get(PACKAGE, "BlockImpl");

        List<FieldSpec> blockFieldSpecs = new ArrayList<>();

        for (Block block : registry) {
            ResourceLocation location = ResourceLocationUtil.getOrThrow(registry, block);
            blockFieldSpecs.add(FieldSpec.builder(BLOCK_CLASS, location.getPath().toUpperCase())
                    .addModifiers(Modifier.PUBLIC, Modifier.STATIC, Modifier.FINAL)
                    .initializer(CodeBlocks.constructor(blockImplClassName,
                            CodeBlocks.keyCreator(location),
                            registry.getId(block)))
                    .build());
        }

        return List.copyOf(blockFieldSpecs);
    }
}