package net.hypejet.jet.data.generator.generators;

import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.FieldSpec;
import net.hypejet.jet.data.generator.ConstantGenerator;
import net.hypejet.jet.data.generator.util.CodeBlocks;
import net.hypejet.jet.data.generator.util.JavaDocBuilder;
import net.hypejet.jet.data.generator.util.ReflectionUtil;
import net.kyori.adventure.key.Key;
import net.minecraft.core.Registry;
import net.minecraft.core.registries.BuiltInRegistries;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.sounds.SoundEvent;
import org.checkerframework.checker.nullness.qual.NonNull;
import org.slf4j.Logger;

import javax.lang.model.element.Modifier;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

/**
 * Represents a {@linkplain ConstantGenerator constant generator}, which generates
 * {@linkplain net.hypejet.jet.data.sound.SoundEvent sound events} using data defined in a
 * {@linkplain BuiltInRegistries#SOUND_EVENT sound event built-in registry}.
 *
 * @since 1.0
 * @author Codestech
 * @see BuiltInRegistries#SOUND_EVENT
 * @see net.hypejet.jet.data.sound.SoundEvent
 * @see ConstantGenerator
 */
public final class BuiltInSoundEventGenerator extends ConstantGenerator {

    private static final String PACKAGE = "net.hypejet.jet.data.sound";
    private static final ClassName CLASS_NAME = ClassName.get(PACKAGE, "BuiltInSoundEvents");

    private static final Field RANGE_FIELD;
    private static final Field NEW_SYSTEM_FIELD;

    private static final Class<?> SOUND_EVENT_CLASS = net.hypejet.jet.data.sound.SoundEvent.class;
    private static final ClassName IMPL_CLASS_NAME = ClassName.get(PACKAGE, "SoundEventImpl");

    static {
        try {
            RANGE_FIELD = SoundEvent.class.getDeclaredField("range");
            NEW_SYSTEM_FIELD = SoundEvent.class.getDeclaredField("newSystem");
        } catch (NoSuchFieldException exception) {
            throw new RuntimeException(exception);
        }
    }

    /**
     * Constructs the {@linkplain BuiltInSoundEventGenerator built-in sound event generator}.
     *
     * @since 1.0
     */
    public BuiltInSoundEventGenerator() {
        super(PACKAGE, CLASS_NAME, SOUND_EVENT_CLASS,
                JavaDocBuilder.builder()
                        .line("Represents a holder of built-in Minecraft sound events.")
                        .paragraph("Code autogenerated, do not edit!")
                        .emptyLine()
                        .since("1.0")
                        .see(Key.class)
                        .build(),
                JavaDocBuilder.builder()
                        .line("Gets all built-in Minecraft sound events.")
                        .emptyLine()
                        .returns("the sound events")
                        .since("1.0")
                        .build());
    }

    @Override
    public @NonNull Collection<FieldSpec> generateFields(@NonNull Logger logger) {
        List<FieldSpec> fieldSpecs = new ArrayList<>();
        Registry<SoundEvent> registry = BuiltInRegistries.SOUND_EVENT;

        for (SoundEvent event : registry) {
            int id = registry.getId(event);
            ResourceLocation location = event.getLocation();

            float range = ReflectionUtil.access(RANGE_FIELD, event, Field::getFloat);
            boolean newSystem = ReflectionUtil.access(NEW_SYSTEM_FIELD, event, Field::getBoolean);

            fieldSpecs.add(FieldSpec.builder(SOUND_EVENT_CLASS, location.getPath().toUpperCase().replace(".", "_"))
                    .addModifiers(Modifier.PUBLIC, Modifier.STATIC, Modifier.FINAL)
                    .initializer(CodeBlocks.constructor(IMPL_CLASS_NAME, CodeBlocks.keyCreator(location), id,
                            CodeBlocks.floatValue(range), newSystem))
                    .build());
        }

        return List.copyOf(fieldSpecs);
    }
}