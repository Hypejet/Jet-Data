package net.hypejet.jet.data.generator.generators.biome;

import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.CodeBlock;
import com.squareup.javapoet.FieldSpec;
import net.hypejet.jet.data.biome.effects.BiomeEffects;
import net.hypejet.jet.data.biome.settings.ClimateSettings;
import net.hypejet.jet.data.generator.ConstantGenerator;
import net.hypejet.jet.data.generator.util.CodeBlocks;
import net.hypejet.jet.data.generator.util.JavaDocBuilder;
import net.hypejet.jet.data.generator.util.ReflectionUtil;
import net.minecraft.core.HolderLookup;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.world.level.biome.Biome;
import net.minecraft.world.level.biome.Biome.TemperatureModifier;
import net.minecraft.world.level.biome.BiomeSpecialEffects;
import org.checkerframework.checker.nullness.qual.NonNull;
import org.slf4j.Logger;

import javax.lang.model.element.Modifier;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.Collection;

/**
 * Represents a {@linkplain ConstantGenerator constant generator}, which generates built-in
 * {@linkplain net.hypejet.jet.data.biome.Biome biomes} using data defined in
 * {@linkplain net.minecraft.data.registries.VanillaRegistries vanilla registries}.
 *
 * @since 1.0
 * @author Codestech
 * @see net.hypejet.jet.data.biome.Biome
 * @see net.minecraft.data.registries.VanillaRegistries
 * @see ConstantGenerator
 */
public final class BuiltInBiomeGenerator extends ConstantGenerator {

    private static final String PACKAGE = "net.hypejet.jet.data.biome";

    static final ClassName CLASS_NAME = ClassName.get(PACKAGE, "BuiltInBiomes");

    private static final Class<?> BIOME_CLASS = net.hypejet.jet.data.biome.Biome.class;

    private static final Class<?> CLIMATE_SETTINGS_CLASS;
    private static final Field CLIMATE_SETTINGS_FIELD;

    private final HolderLookup.RegistryLookup<Biome> registryLookup;

    static {
        try {
            CLIMATE_SETTINGS_CLASS = Class.forName("net.minecraft.world.level.biome.Biome$ClimateSettings");
            CLIMATE_SETTINGS_FIELD = Biome.class.getDeclaredField("climateSettings");
        } catch (NoSuchFieldException | ClassNotFoundException exception) {
            throw new RuntimeException(exception);
        }
    }

    /**
     * Constructs a {@linkplain BuiltInBiomeGenerator built-in biome generator}.
     *
     * @param biomeRegistryLookup a lookup to the biome registry
     * @since 1.0
     */
    public BuiltInBiomeGenerator(HolderLookup.@NonNull RegistryLookup<Biome> biomeRegistryLookup) {
        super(PACKAGE, CLASS_NAME, BIOME_CLASS,
                JavaDocBuilder.builder()
                        .line("Represents a holder of built-in Minecraft biomes.")
                        .paragraph("Code autogenerated, do not edit!")
                        .emptyLine()
                        .since("1.0")
                        .see(BIOME_CLASS)
                        .build(),
                JavaDocBuilder.builder()
                        .line("Gets all built-in biomes.")
                        .emptyLine()
                        .returns("the biomes")
                        .since("1.0")
                        .see(BIOME_CLASS)
                        .build());
        this.registryLookup = biomeRegistryLookup;
    }

    @Override
    public @NonNull Collection<FieldSpec> generateFields(@NonNull Logger logger) {
        return this.registryLookup.listElements()
                .map(reference -> {
                    ResourceLocation location = reference.key().location();
                    Biome biome = reference.value();
                    return FieldSpec.builder(BIOME_CLASS, constantName(location))
                            .addModifiers(Modifier.PUBLIC, Modifier.STATIC, Modifier.FINAL)
                            .initializer(CodeBlocks.staticMethodInvocation(BIOME_CLASS, "biome",
                                    CodeBlocks.keyCreator(location), climateSettingsCreator(biome),
                                    biomeEffectsCreator(biome.getSpecialEffects())))
                            .build();
                })
                .toList();
    }

    /**
     * Creates a constant name for a biome.
     *
     * @param location a resource location of the biome
     * @return the constant name
     * @since 1.0
     */
    static @NonNull String constantName(@NonNull ResourceLocation location) {
        return location.getPath().toUpperCase();
    }

    private static @NonNull CodeBlock climateSettingsCreator(@NonNull Biome biome) {
        Object climateSettings = ReflectionUtil.access(CLIMATE_SETTINGS_FIELD, biome, Field::get);

        Method hasPrecipitationMethod;
        Method temperatureMethod;
        Method temperatureModifierMethod;
        Method downfallMethod;

        try {
            hasPrecipitationMethod = CLIMATE_SETTINGS_CLASS.getDeclaredMethod("hasPrecipitation");
            temperatureMethod = CLIMATE_SETTINGS_CLASS.getDeclaredMethod("temperature");
            temperatureModifierMethod = CLIMATE_SETTINGS_CLASS.getDeclaredMethod("temperatureModifier");
            downfallMethod = CLIMATE_SETTINGS_CLASS.getDeclaredMethod("downfall");
        } catch (NoSuchMethodException exception) {
            throw new RuntimeException(exception);
        }

        boolean hasPrecipitation = (boolean) ReflectionUtil.invoke(hasPrecipitationMethod, climateSettings);
        float temperature = (float) ReflectionUtil.invoke(temperatureMethod, climateSettings);

        TemperatureModifier temperatureModifier = (TemperatureModifier) ReflectionUtil.invoke(
                temperatureModifierMethod, climateSettings
        );

        float downfall = (float) ReflectionUtil.access(downfallMethod, climateSettings, Method::invoke);

        return CodeBlocks.constructor(ClimateSettings.class,
                hasPrecipitation,
                CodeBlocks.floatValue(temperature),
                CodeBlocks.staticFieldReference(BuiltInTemperatureModifierGenerator.CLASS_NAME,
                        BuiltInTemperatureModifierGenerator.constantName(temperatureModifier)),
                CodeBlocks.floatValue(downfall)
        );
    }

    private static @NonNull CodeBlock biomeEffectsCreator(@NonNull BiomeSpecialEffects effects) {
        return CodeBlocks.constructor(BiomeEffects.class, effects.getFogColor(), effects.getWaterColor(),
                effects.getWaterFogColor(), effects.getSkyColor(),
                CodeBlocks.optionalInt(effects.getFoliageColorOverride().orElse(null)),
                CodeBlocks.optionalInt(effects.getGrassColorOverride().orElse(null)),
                CodeBlocks.staticFieldReference(BuiltInGrassColorModifierGenerator.CLASS_NAME,
                        BuiltInGrassColorModifierGenerator.constantName(effects.getGrassColorModifier()))
        );
    }
}
