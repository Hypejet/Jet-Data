package net.hypejet.jet.data.generator.generators;

import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.FieldSpec;
import net.hypejet.jet.data.generator.ConstantGenerator;
import net.hypejet.jet.data.generator.util.CodeBlocks;
import net.hypejet.jet.data.generator.util.JavaDocBuilder;
import net.kyori.adventure.key.Key;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.world.flag.FeatureFlagRegistry;
import net.minecraft.world.flag.FeatureFlags;
import org.checkerframework.checker.nullness.qual.NonNull;
import org.slf4j.Logger;

import javax.lang.model.element.Modifier;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

/**
 * Represents a {@linkplain ConstantGenerator constant generator}, which generates built-in Minecraft feature flags
 * using data defined in {@linkplain FeatureFlagRegistry feature flag regsitry}.
 *
 * @since 1.0
 * @author Codestech
 * @see FeatureFlagRegistry
 * @see ConstantGenerator
 */
public final class BuiltInFeatureFlagsGenerator extends ConstantGenerator {

    private static final String PACKAGE = "net.hypejet.jet.data.feature";
    private static final String CLASS = "BuiltInFeatureFlags";

    static final ClassName CLASS_NAME = ClassName.get(PACKAGE, CLASS);

    /**
     * Constructs the {@linkplain BuiltInFeatureFlagsGenerator built-int feature flags generator}.
     *
     * @since 1.0
     */
    public BuiltInFeatureFlagsGenerator() {
        super(PACKAGE, CLASS_NAME, Key.class,
                JavaDocBuilder.builder()
                        .line("Represents a holder of built-in Minecraft feature flags.")
                        .paragraph("Code autogenerated, do not edit!")
                        .emptyLine()
                        .since("1.0")
                        .see(Key.class)
                        .build(),
                JavaDocBuilder.builder()
                        .line("Gets all built-in Minecraft feature flags.")
                        .emptyLine()
                        .returns("the feature flags")
                        .since("1.0")
                        .build());
    }

    @Override
    public @NonNull Collection<FieldSpec> generateFields(@NonNull Logger logger) {
        List<FieldSpec> specs = new ArrayList<>();

        FeatureFlagRegistry registry = FeatureFlags.REGISTRY;
        for (ResourceLocation location : registry.toNames(registry.allFlags())) {
            specs.add(FieldSpec.builder(Key.class, constantName(location))
                    .addModifiers(Modifier.PUBLIC, Modifier.STATIC, Modifier.FINAL)
                    .initializer(CodeBlocks.keyCreator(location))
                    .build());
        }

        return List.copyOf(specs);
    }

    /**
     * Creates a constant name for a feature flag.
     *
     * @param location a resource location of the feature flag
     * @return the constant name
     * @since 1.0
     */
    static @NonNull String constantName(@NonNull ResourceLocation location) {
        return location.getPath().toUpperCase();
    }
}