package net.hypejet.jet.data.generator.generators;

import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.CodeBlock;
import com.squareup.javapoet.FieldSpec;
import net.hypejet.jet.data.generator.ConstantGenerator;
import net.hypejet.jet.data.generator.Generator;
import net.hypejet.jet.data.generator.util.CodeBlocks;
import net.hypejet.jet.data.generator.util.JavaDocBuilder;
import net.hypejet.jet.data.generator.util.ResourceLocationUtil;
import net.minecraft.core.DefaultedRegistry;
import net.minecraft.core.registries.BuiltInRegistries;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.world.entity.EntityDimensions;
import net.minecraft.world.entity.EntityType;
import org.checkerframework.checker.nullness.qual.NonNull;
import org.slf4j.Logger;

import javax.lang.model.element.Modifier;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

/**
 * Represents a {@linkplain ConstantGenerator constant generator}, which
 * generates {@linkplain net.hypejet.jet.data.entity.type.EntityType entity types} using data defined in
 * an {@linkplain BuiltInRegistries#ENTITY_TYPE entity type registry}.
 *
 * @since 1.0
 * @author Codestech
 * @see net.hypejet.jet.data.entity.type.EntityType
 * @see BuiltInRegistries#ENTITY_TYPE
 * @see Generator
 */
public final class VanillaEntityTypeGenerator extends ConstantGenerator {

    private static final String PACKAGE = "net.hypejet.jet.data.entity.type";
    private static final String CLASS = "VanillaEntityTypes";

    static final ClassName CLASS_NAME = ClassName.get(PACKAGE, CLASS);

    private static final Class<?> ENTITY_TYPE_CLASS = net.hypejet.jet.data.entity.type.EntityType.class;
    private static final Class<?> ENTITY_DIMENSIONS_CLASS = net.hypejet.jet.data.entity.type.EntityType
            .EntityDimensions.class;

    private static final Field SPAWN_DIMENSIONS_SCALE_FIELD;

    static {
        try {
            SPAWN_DIMENSIONS_SCALE_FIELD = EntityType.class.getDeclaredField("spawnDimensionsScale");
        } catch (NoSuchFieldException exception) {
            throw new RuntimeException(exception);
        }
    }

    /**
     * Constructs the {@linkplain VanillaEntityTypeGenerator vanilla entity type generator}.
     *
     * @since 1.0
     */
    public VanillaEntityTypeGenerator() {
        super(PACKAGE, CLASS_NAME, ENTITY_TYPE_CLASS,
                JavaDocBuilder.builder()
                        .line("Represents a built-in Minecraft entity type.")
                        .paragraph("Code autogenerated, do not edit!")
                        .emptyLine()
                        .since("1.0")
                        .see(ENTITY_TYPE_CLASS)
                        .build(),
                JavaDocBuilder.builder()
                        .line("Gets all built-in entity types.")
                        .emptyLine()
                        .returns("the types")
                        .since("1.0")
                        .see(ENTITY_TYPE_CLASS)
                        .build());
    }

    @Override
    public @NonNull Collection<FieldSpec> generateFields(@NonNull Logger logger) {
        DefaultedRegistry<EntityType<?>> registry = BuiltInRegistries.ENTITY_TYPE;
        ClassName entityTypeImplClassName = ClassName.get(PACKAGE, "EntityTypeImpl");

        List<FieldSpec> entityTypeFieldSpecs = new ArrayList<>();

        for (EntityType<?> entityType : registry) {
            ResourceLocation location = ResourceLocationUtil.getOrThrow(registry, entityType);

            EntityDimensions entityDimensions = entityType.getDimensions();
            CodeBlock entityDimensionsConstructor = CodeBlocks.constructor(ENTITY_DIMENSIONS_CLASS,
                    CodeBlocks.floatValue(entityDimensions.width()), CodeBlocks.floatValue(entityDimensions.height()),
                    CodeBlocks.floatValue(entityDimensions.eyeHeight()), entityDimensions.fixed());

            boolean canSerialize = entityType.canSerialize();
            boolean canSummon = entityType.canSummon();
            boolean fireImmune = entityType.fireImmune();
            boolean canSpawnFarFromPlayer = entityType.canSpawnFarFromPlayer();

            int clientTrackingRange = entityType.clientTrackingRange();
            int updateInterval = entityType.updateInterval();

            float spawnDimensionsScale = getSpawnDimensionsScale(entityType);

            CodeBlock entityCategoryBlock = CodeBlocks.staticFieldReference(VanillaEntityCategoryGenerator.CLASS_NAME,
                    VanillaEntityCategoryGenerator.constantName(entityType.getCategory()));

            entityTypeFieldSpecs.add(FieldSpec.builder(ENTITY_TYPE_CLASS, location.getPath().toUpperCase())
                    .addModifiers(Modifier.PUBLIC, Modifier.STATIC, Modifier.FINAL)
                    .initializer(CodeBlocks.constructor(entityTypeImplClassName, CodeBlocks.keyCreator(location),
                            registry.getId(entityType), canSerialize, canSummon, fireImmune, canSpawnFarFromPlayer,
                            clientTrackingRange, updateInterval, CodeBlocks.floatValue(spawnDimensionsScale),
                            entityDimensionsConstructor, entityCategoryBlock))
                    .build());
        }

        return List.copyOf(entityTypeFieldSpecs);
    }

    private static float getSpawnDimensionsScale(@NonNull EntityType<?> type) {
        try {
            boolean wasAccessible = SPAWN_DIMENSIONS_SCALE_FIELD.canAccess(type);

            if (!wasAccessible) SPAWN_DIMENSIONS_SCALE_FIELD.setAccessible(true);
            float spawnDimensionsScale = SPAWN_DIMENSIONS_SCALE_FIELD.getFloat(type);

            if (!wasAccessible) SPAWN_DIMENSIONS_SCALE_FIELD.setAccessible(false);
            return spawnDimensionsScale;
        } catch (IllegalAccessException exception) {
            throw new RuntimeException(exception);
        }
    }
}