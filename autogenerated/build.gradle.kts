import java.nio.file.Files
import java.nio.file.Path
import kotlin.io.path.deleteIfExists
import kotlin.io.path.exists
import kotlin.io.path.isDirectory

plugins {
    `maven-publish`
}

val generatorProject = rootProject.project(":jet-data-generator")
val modelProject = rootProject.project(":jet-data-model")

dependencies {
    compileOnly(libs.adventureApi)
    compileOnly(libs.checkerFrameworkQual)
    compileOnly(modelProject)
}

publishing {
    publications.create<MavenPublication>("maven") {
        from(components["java"])
    }
}

tasks {
    withType<JavaCompile> {
        val autogeneratedProject = project // It becomes inaccessible later via the "project" field
        dependsOn(generatorProject.tasks.withType<JavaExec> {
            val sourceDirectories = autogeneratedProject.sourceSets.main.get().java.sourceDirectories.toList()

            if (sourceDirectories.size != 1) {
                error("Expected to have exactly one source directory ")
            }

            val path = sourceDirectories.first().toPath().toAbsolutePath()
            if (path.exists() && path.isDirectory()) {
                // Remove the old generated files
                Files.list(path).forEach(::removeRecursively)
            }

            args(path.toString())
        })
    }
}

private fun removeRecursively(path: Path) {
    if (!path.exists()) return

    if (path.isDirectory()) {
        Files.list(path).forEach(::removeRecursively)
    }

    path.deleteIfExists()
}